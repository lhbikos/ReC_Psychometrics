ValueA ~~ .57*MeaningB
ValueA ~~ .56*EnactmentB
MeaningA ~~ .77*EnactmentA
MeaningA ~~ .59*ValueB
MeaningA ~~ .70*MeaningB
MeaningA ~~ .58*EnactmentB
EnactmentA ~~ .54*ValueB
EnactmentA ~~ .79*MeaningB
EnactmentA ~~ .66*EnactmentB
ValueB ~~ .81*MeaningB
ValueB ~~ .82*EnactmentB
MeaningB ~~ .81*EnactmentB
'
set.seed(240326)
idThreatAB <- lavaan::simulateData(model = idThreat_generating_modelAB,
model.type = "sem",
meanstructure = T,
sample.nobs=500,
standardized=FALSE)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(idThreatAB))
#The code below loops through each column of the dataframe and assigns the scaling accordingly
#All rows are the iBel scales, administrations A and B
for(i in 1:ncol(idThreatAB)){
if(i >= 1 & i <= 38){
idThreatAB[,i] <- scales::rescale(idThreatAB[,i], c(1, 5))
}
}
#rounding to integers so that the data resembles that which was collected
library(tidyverse)
idThreatAB <- idThreatAB %>% round(0)
#quick check of my work
#psych::describe(iBelAB)
View(idThreatAB)
#First creating a tiny df with just the GroupA observations
#Add an ID variable to each row
IdThreatA <- dplyr::select(IdThreatAB, Val1a, Val2a, Val3a, Val4a, Val5a, Mng1a, Mng2a, Mng3a, Mng4a, Mng5a, Mng6a, Mng7a, Mng8a, Enact1a, Enact2a, Enact3a, Enact4a, Enact5a, Enact6a)
#First creating a tiny df with just the GroupA observations
#Add an ID variable to each row
IdThreatA <- dplyr::select(idThreatAB, Val1a, Val2a, Val3a, Val4a, Val5a, Mng1a, Mng2a, Mng3a, Mng4a, Mng5a, Mng6a, Mng7a, Mng8a, Enact1a, Enact2a, Enact3a, Enact4a, Enact5a, Enact6a)
#adding a variable to indicate these are from Group A
IdThreatA$Group <- "GroupA"
#renaming so that when I bind the A and B dfs they have the same variable names
IdThreatA <- dplyr::rename(iBelA,  Val1 = 'Val1a', Val2 = 'Val2a', Val3 = 'Val3a', Val4 = 'Val4a', Val5 = 'Val5a', Mng1 = 'Mng1a', Mng2 = 'Mng2a', Mng3 = 'Mng3a', Mng4 = 'Mng4a', Mng5 = 'Mng5a', Mng6 = 'Mng6a', Mng7 = 'Mng7a', mng8 = 'Mng8a', Enact1 = 'Enact1a', Enact2 = 'Enact2a', Enact3 = 'Enact3a', Enact4 = 'Enact4a', Enact5 = 'Enact5a', Enact6 = 'Enact6a')
IdThreatA <- dplyr::rename(idThreatAB,  Val1 = 'Val1a', Val2 = 'Val2a', Val3 = 'Val3a', Val4 = 'Val4a', Val5 = 'Val5a', Mng1 = 'Mng1a', Mng2 = 'Mng2a', Mng3 = 'Mng3a', Mng4 = 'Mng4a', Mng5 = 'Mng5a', Mng6 = 'Mng6a', Mng7 = 'Mng7a', mng8 = 'Mng8a', Enact1 = 'Enact1a', Enact2 = 'Enact2a', Enact3 = 'Enact3a', Enact4 = 'Enact4a', Enact5 = 'Enact5a', Enact6 = 'Enact6a')
View(IdThreatA)
#Add an ID variable to each row
IdThreatA <- dplyr::select(idThreatAB, Val1a, Val2a, Val3a, Val4a, Val5a, Mng1a, Mng2a, Mng3a, Mng4a, Mng5a, Mng6a, Mng7a, Mng8a, Enact1a, Enact2a, Enact3a, Enact4a, Enact5a, Enact6a)
#adding a variable to indicate these are from Group A
IdThreatA$Group <- "GroupA"
#renaming so that when I bind the A and B dfs they have the same variable names
IdThreatA1 <- dplyr::rename(idThreatAB,  Val1 = 'Val1a', Val2 = 'Val2a', Val3 = 'Val3a', Val4 = 'Val4a', Val5 = 'Val5a', Mng1 = 'Mng1a', Mng2 = 'Mng2a', Mng3 = 'Mng3a', Mng4 = 'Mng4a', Mng5 = 'Mng5a', Mng6 = 'Mng6a', Mng7 = 'Mng7a', Mng8 = 'Mng8a', Enact1 = 'Enact1a', Enact2 = 'Enact2a', Enact3 = 'Enact3a', Enact4 = 'Enact4a', Enact5 = 'Enact5a', Enact6 = 'Enact6a')
View(IdThreatA1)
IdThreatA <- dplyr::select(idThreatAB, Val1a, Val2a, Val3a, Val4a, Val5a, Mng1a, Mng2a, Mng3a, Mng4a, Mng5a, Mng6a, Mng7a, Mng8a, Enact1a, Enact2a, Enact3a, Enact4a, Enact5a, Enact6a)
#adding a variable to indicate these are from Group A
IdThreatA$Group <- "GroupA"
#renaming so that when I bind the A and B dfs they have the same variable names
IdThreatA1 <- dplyr::rename(IdThreatA,  Val1 = 'Val1a', Val2 = 'Val2a', Val3 = 'Val3a', Val4 = 'Val4a', Val5 = 'Val5a', Mng1 = 'Mng1a', Mng2 = 'Mng2a', Mng3 = 'Mng3a', Mng4 = 'Mng4a', Mng5 = 'Mng5a', Mng6 = 'Mng6a', Mng7 = 'Mng7a', Mng8 = 'Mng8a', Enact1 = 'Enact1a', Enact2 = 'Enact2a', Enact3 = 'Enact3a', Enact4 = 'Enact4a', Enact5 = 'Enact5a', Enact6 = 'Enact6a')
View(IdThreatA)
View(IdThreatA1)
IdThreatB <- dplyr::select(idThreatAB, Val1b, Val2b, Val3b, Val4b, Val5b, Mng1b, Mng2b, Mng3b, Mng4b, Mng5b, Mng6b, Mng7b, Mng8b, Enact1b, Enact2b, Enact3b, Enact4b, Enact5b, Enact6b)
#adding a variable to indicate these are from Group A
IdThreatB$Group <- "GroupB"
#renaming so that when I bind the A and B dfs they have the same variable names
IdThreatB1 <- dplyr::rename(IdThreatB,  Val1 = 'Val1b', Val2 = 'Val2b', Val3 = 'Val3b', Val4 = 'Val4ab', Val5 = 'Val5b', Mng1 = 'Mng1b', Mng2 = 'Mng2b', Mng3 = 'Mng3b', Mng4 = 'Mng4b', Mng5 = 'Mng5b', Mng6 = 'Mng6b', Mng7 = 'Mng7b', Mng8 = 'Mng8b', Enact1 = 'Enact1b', Enact2 = 'Enact2b', Enact3 = 'Enact3b', Enact4 = 'Enact4b', Enact5 = 'Enact5b', Enact6 = 'Enact6b')
IdThreatB <- dplyr::select(idThreatAB, Val1b, Val2b, Val3b, Val4b, Val5b, Mng1b, Mng2b, Mng3b, Mng4b, Mng5b, Mng6b, Mng7b, Mng8b, Enact1b, Enact2b, Enact3b, Enact4b, Enact5b, Enact6b)
#adding a variable to indicate these are from Group A
IdThreatB$Group <- "GroupB"
#renaming so that when I bind the A and B dfs they have the same variable names
IdThreatB1 <- dplyr::rename(IdThreatB,  Val1 = 'Val1b', Val2 = 'Val2b', Val3 = 'Val3b', Val4 = 'Val4b', Val5 = 'Val5b', Mng1 = 'Mng1b', Mng2 = 'Mng2b', Mng3 = 'Mng3b', Mng4 = 'Mng4b', Mng5 = 'Mng5b', Mng6 = 'Mng6b', Mng7 = 'Mng7b', Mng8 = 'Mng8b', Enact1 = 'Enact1b', Enact2 = 'Enact2b', Enact3 = 'Enact3b', Enact4 = 'Enact4b', Enact5 = 'Enact5b', Enact6 = 'Enact6b')
View(IdThreatB1)
IdThreatLONG <- rbind(IdThreatA, IdThreatB)
IdThreatB <- dplyr::rename(IdThreatB,  Val1 = 'Val1b', Val2 = 'Val2b', Val3 = 'Val3b', Val4 = 'Val4b', Val5 = 'Val5b', Mng1 = 'Mng1b', Mng2 = 'Mng2b', Mng3 = 'Mng3b', Mng4 = 'Mng4b', Mng5 = 'Mng5b', Mng6 = 'Mng6b', Mng7 = 'Mng7b', Mng8 = 'Mng8b', Enact1 = 'Enact1b', Enact2 = 'Enact2b', Enact3 = 'Enact3b', Enact4 = 'Enact4b', Enact5 = 'Enact5b', Enact6 = 'Enact6b')
#Binding the A and B sets of data
#use this df for the invariance homework
IdThreatLONG <- rbind(IdThreatA, IdThreatB)
#First creating a tiny df with just the GroupA observations
#Add an ID variable to each row
IdThreatA <- dplyr::select(idThreatAB, Val1a, Val2a, Val3a, Val4a, Val5a, Mng1a, Mng2a, Mng3a, Mng4a, Mng5a, Mng6a, Mng7a, Mng8a, Enact1a, Enact2a, Enact3a, Enact4a, Enact5a, Enact6a)
#adding a variable to indicate these are from Group A
IdThreatA$Group <- "GroupA"
#renaming so that when I bind the A and B dfs they have the same variable names
IdThreatA <- dplyr::rename(IdThreatA,  Val1 = 'Val1a', Val2 = 'Val2a', Val3 = 'Val3a', Val4 = 'Val4a', Val5 = 'Val5a', Mng1 = 'Mng1a', Mng2 = 'Mng2a', Mng3 = 'Mng3a', Mng4 = 'Mng4a', Mng5 = 'Mng5a', Mng6 = 'Mng6a', Mng7 = 'Mng7a', Mng8 = 'Mng8a', Enact1 = 'Enact1a', Enact2 = 'Enact2a', Enact3 = 'Enact3a', Enact4 = 'Enact4a', Enact5 = 'Enact5a', Enact6 = 'Enact6a')
#Second creating a tiny df with just the GroupB observations
#Add an ID variable to each row
IdThreatB <- dplyr::select(idThreatAB, Val1b, Val2b, Val3b, Val4b, Val5b, Mng1b, Mng2b, Mng3b, Mng4b, Mng5b, Mng6b, Mng7b, Mng8b, Enact1b, Enact2b, Enact3b, Enact4b, Enact5b, Enact6b)
#adding a variable to indicate these are from Group A
IdThreatB$Group <- "GroupB"
#renaming so that when I bind the A and B dfs they have the same variable names
IdThreatB <- dplyr::rename(IdThreatB,  Val1 = 'Val1b', Val2 = 'Val2b', Val3 = 'Val3b', Val4 = 'Val4b', Val5 = 'Val5b', Mng1 = 'Mng1b', Mng2 = 'Mng2b', Mng3 = 'Mng3b', Mng4 = 'Mng4b', Mng5 = 'Mng5b', Mng6 = 'Mng6b', Mng7 = 'Mng7b', Mng8 = 'Mng8b', Enact1 = 'Enact1b', Enact2 = 'Enact2b', Enact3 = 'Enact3b', Enact4 = 'Enact4b', Enact5 = 'Enact5b', Enact6 = 'Enact6b')
#Binding the A and B sets of data
#use this df for the invariance homework
IdThreatLONG <- rbind(IdThreatA, IdThreatB)
View(IdThreatLONG)
ARBI_generating_modelAB <- '
#measurement model
AdvocacyA  =~ .450*Advoc1a + .671*Advoc2a + .715*Advoc3a + .650*Advoc4a + .548*Advoc5a + .634*Advoc6a + .593*Advoc7a + 532*Advoc8a + .592*Advoc9a
AwarenessA =~ .239*Aware1a + .836*Aware2a + .754*Aware3a + .877*Aware4a + .791*Aware5a + .727*Aware6a + .782*Aware7a
InstitutionalA =~ .698*Inst1a + .397*Inst2a + .680*Inst3a + .589*Inst4a + .798*Inst5a2293*Advoc7b + 532*Advoc8b + .564*Advoc9b
AwarenessB =~ .253*Aware1b + .800*Aware2b + .721*Aware3b + .842*Aware4b + .701*Aware5b + .797*Aware6b + .742*Aware7b
InstitutionalB =~ .623*Inst1b + .301*Inst2b + .666*Inst3b + .533*Inst4b + .721*Inst5b
#Means
AdvocacyA ~5.33*1
AwarenessA ~ 4.26*1
InstitutionalA ~ 1.66*1
AdvocacyB ~5.25*1
AwarenessB ~ 4.30*1
InstitutionalB ~ 1.71*1
#Correlations
AdvocacyA ~~ .80*AwarenessA
AdvocacyA ~~ .80*InstitutionalA
AdvocacyA ~~ .63*AdvocacyB
AdvocacyA ~~ .57*AwarenessB
AdvocacyA ~~ .56*InstitutionalB
AwarenessA ~~ .77*InstitutionalA
AwarenessA ~~ .59*AdvocacyB
AwarenessA ~~ .70*AwarenessB
AwarenessA ~~ .58*InstitutionalB
InstitutionalA ~~ .54*AdvocacyB
InstitutionalA ~~ .79*AwarenessB
InstitutionalA ~~ .66*InstitutionalB
AdvocacyB ~~ .81*AwarenessB
AdvocacyB ~~ .82*InstitutionalB
AwarenessB ~~ .81*InstitutionalB
'
set.seed(240326)
ARBI_AB <- lavaan::simulateData(model = ARBI_generating_modelAB,
model.type = "sem",
meanstructure = T,
sample.nobs=300,
standardized=FALSE)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(ARBI_AB))
#The code below loops through each column of the dataframe and assigns the scaling accordingly
#All rows are the iBel scales, administrations A and B
for(i in 1:ncol(ARBI_AB)){
if(i >= 1 & i <= 42){
ARBI_AB[,i] <- scales::rescale(ARBI_AB[,i], c(1, 5))
}
}
#rounding to integers so that the data resembles that which was collected
library(tidyverse)
ARBI_AB <- ARBI_AB %>% round(0)
#quick check of my work
#psych::describe(iBelAB)
ARBI_A <- dplyr::select(idThreatAB, Advoc1a, Advoc2a, Advoc3a, Advoc4a, Advoc5a, Advoc6a, Advoc7a, Advoc8a, Advoc9a, Aware1a, Aware2a, Aware3a, Aware4a, Aware5a, Aware6a, Aware7a, Inst1a, Inst2a, Inst3a, Inst4a)
ARBI_A <- dplyr::select(ARBI_AB, Advoc1a, Advoc2a, Advoc3a, Advoc4a, Advoc5a, Advoc6a, Advoc7a, Advoc8a, Advoc9a, Aware1a, Aware2a, Aware3a, Aware4a, Aware5a, Aware6a, Aware7a, Inst1a, Inst2a, Inst3a, Inst4a)
#adding a variable to indicate these are from Group A
ARBI_A$Group <- "GroupA"
View(ARBI_A)
ARBI_A1 <- dplyr::rename(ARBI_A,  Advoc1 = 'Advoc1a', Advoc2 = 'Advoc2a', Advoc3 = 'Advoc3a', Advoc4 = 'Advoc4a', Advoc5 = 'Advoc5a', Advoc6 = 'Advoc6a', Advoc7 = 'Advoc7a', Advoc8 = 'Advoc8a', Advoc9 = 'Advoc9a', Aware1 = 'Aware1a', Aware2 = 'Aware2a', Aware3 = 'Aware3a', Aware4 = 'Aware4a', Aware5 = 'Aware5a', Aware6 = 'Aware6a', Aware7 = 'Aware7a', Inst1 = 'Inst1a', Inst2 = 'Inst2a', Inst3 = 'Inst3a', Inst4 = 'Inst4a')
View(ARBI_A1)
View(ARBI_A1)
View(ARBI_AB)
View(ARBI_A1)
#Add an ID variable to each row
ARBI_B <- dplyr::select(ARBI_AB, Advoc1b, Advoc2b, Advoc3b, Advoc4b, Advoc5b, Advoc6b, Advoc7b, Advoc8b, Advoc9b, Aware1b, Aware2b, Aware3b, Aware4b, Aware5b, Aware6b, Aware7b, Inst1b, Inst2b, Inst3b, Inst4b)
ARBI_B <- dplyr::select(ARBI_AB, Advoc1b, Advoc2b, Advoc3b, Advoc4b, Advoc5b, Advoc6b, Advoc7b, Advoc8b, Advoc9b, Aware1b, Aware2b, Aware3b, Aware4b, Aware5b, Aware6b, Aware7b, Inst1b, Inst2b, Inst3b, Inst4b)
ARBI_generating_modelAB <- '
#measurement model
AdvocacyA  =~ .450*Advoc1a + .671*Advoc2a + .715*Advoc3a + .650*Advoc4a + .548*Advoc5a + .634*Advoc6a + .593*Advoc7a + .532*Advoc8a + .592*Advoc9a
AwarenessA =~ .239*Aware1a + .836*Aware2a + .754*Aware3a + .877*Aware4a + .791*Aware5a + .727*Aware6a + .782*Aware7a
InstitutionalA =~ .698*Inst1a + .397*Inst2a + .680*Inst3a + .589*Inst4a + .798*Inst5a2293*Advoc7b + 532*Advoc8b + .564*Advoc9b
AdvocacyB +~ .378*Advoc1b + .666*Advoc2b + .683*Advoc3b + .555*Advoc4b + .672*Advoc5b + .822*Advoc6b + .511*Advoc7b + .488*Advoc8b + .513*Advoc9b
AwarenessB =~ .253*Aware1b + .800*Aware2b + .721*Aware3b + .842*Aware4b + .701*Aware5b + .797*Aware6b + .742*Aware7b
InstitutionalB =~ .623*Inst1b + .301*Inst2b + .666*Inst3b + .533*Inst4b + .721*Inst5b
#Means
AdvocacyA ~5.33*1
AwarenessA ~ 4.26*1
InstitutionalA ~ 1.66*1
AdvocacyB ~5.25*1
AwarenessB ~ 4.30*1
InstitutionalB ~ 1.71*1
#Correlations
AdvocacyA ~~ .80*AwarenessA
AdvocacyA ~~ .80*InstitutionalA
AdvocacyA ~~ .63*AdvocacyB
AdvocacyA ~~ .57*AwarenessB
AdvocacyA ~~ .56*InstitutionalB
AwarenessA ~~ .77*InstitutionalA
AwarenessA ~~ .59*AdvocacyB
AwarenessA ~~ .70*AwarenessB
AwarenessA ~~ .58*InstitutionalB
InstitutionalA ~~ .54*AdvocacyB
InstitutionalA ~~ .79*AwarenessB
InstitutionalA ~~ .66*InstitutionalB
AdvocacyB ~~ .81*AwarenessB
AdvocacyB ~~ .82*InstitutionalB
AwarenessB ~~ .81*InstitutionalB
'
set.seed(240326)
ARBI_AB <- lavaan::simulateData(model = ARBI_generating_modelAB,
model.type = "sem",
meanstructure = T,
sample.nobs=300,
standardized=FALSE)
ARBI_generating_modelAB <- '
#measurement model
AdvocacyA  =~ .450*Advoc1a + .671*Advoc2a + .715*Advoc3a + .650*Advoc4a + .548*Advoc5a + .634*Advoc6a + .593*Advoc7a + .532*Advoc8a + .592*Advoc9a
AwarenessA =~ .239*Aware1a + .836*Aware2a + .754*Aware3a + .877*Aware4a + .791*Aware5a + .727*Aware6a + .782*Aware7a
InstitutionalA =~ .698*Inst1a + .397*Inst2a + .680*Inst3a + .589*Inst4a + .798*Inst5a2293*Advoc7b + 532*Advoc8b + .564*Advoc9b
AdvocacyB =~ .378*Advoc1b + .666*Advoc2b + .683*Advoc3b + .555*Advoc4b + .672*Advoc5b + .822*Advoc6b + .511*Advoc7b + .488*Advoc8b + .513*Advoc9b
AwarenessB =~ .253*Aware1b + .800*Aware2b + .721*Aware3b + .842*Aware4b + .701*Aware5b + .797*Aware6b + .742*Aware7b
InstitutionalB =~ .623*Inst1b + .301*Inst2b + .666*Inst3b + .533*Inst4b + .721*Inst5b
#Means
AdvocacyA ~5.33*1
AwarenessA ~ 4.26*1
InstitutionalA ~ 1.66*1
AdvocacyB ~5.25*1
AwarenessB ~ 4.30*1
InstitutionalB ~ 1.71*1
#Correlations
AdvocacyA ~~ .80*AwarenessA
AdvocacyA ~~ .80*InstitutionalA
AdvocacyA ~~ .63*AdvocacyB
AdvocacyA ~~ .57*AwarenessB
AdvocacyA ~~ .56*InstitutionalB
AwarenessA ~~ .77*InstitutionalA
AwarenessA ~~ .59*AdvocacyB
AwarenessA ~~ .70*AwarenessB
AwarenessA ~~ .58*InstitutionalB
InstitutionalA ~~ .54*AdvocacyB
InstitutionalA ~~ .79*AwarenessB
InstitutionalA ~~ .66*InstitutionalB
AdvocacyB ~~ .81*AwarenessB
AdvocacyB ~~ .82*InstitutionalB
AwarenessB ~~ .81*InstitutionalB
'
set.seed(240326)
ARBI_AB <- lavaan::simulateData(model = ARBI_generating_modelAB,
model.type = "sem",
meanstructure = T,
sample.nobs=300,
standardized=FALSE)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(ARBI_AB))
#The code below loops through each column of the dataframe and assigns the scaling accordingly
#All rows are the iBel scales, administrations A and B
for(i in 1:ncol(ARBI_AB)){
if(i >= 1 & i <= 42){
ARBI_AB[,i] <- scales::rescale(ARBI_AB[,i], c(1, 5))
}
}
#rounding to integers so that the data resembles that which was collected
library(tidyverse)
ARBI_AB <- ARBI_AB %>% round(0)
#quick check of my work
#psych::describe(iBelAB)
ARBI_A <- dplyr::select(ARBI_AB, Advoc1a, Advoc2a, Advoc3a, Advoc4a, Advoc5a, Advoc6a, Advoc7a, Advoc8a, Advoc9a, Aware1a, Aware2a, Aware3a, Aware4a, Aware5a, Aware6a, Aware7a, Inst1a, Inst2a, Inst3a, Inst4a)
#adding a variable to indicate these are from Group A
ARBI_A$Group <- "GroupA"
#renaming so that when I bind the A and B dfs they have the same variable names
ARBI_A <- dplyr::rename(ARBI_A,  Advoc1 = 'Advoc1a', Advoc2 = 'Advoc2a', Advoc3 = 'Advoc3a', Advoc4 = 'Advoc4a', Advoc5 = 'Advoc5a', Advoc6 = 'Advoc6a', Advoc7 = 'Advoc7a', Advoc8 = 'Advoc8a', Advoc9 = 'Advoc9a', Aware1 = 'Aware1a', Aware2 = 'Aware2a', Aware3 = 'Aware3a', Aware4 = 'Aware4a', Aware5 = 'Aware5a', Aware6 = 'Aware6a', Aware7 = 'Aware7a', Inst1 = 'Inst1a', Inst2 = 'Inst2a', Inst3 = 'Inst3a', Inst4 = 'Inst4a')
ARBI_B <- dplyr::select(ARBI_AB, Advoc1b, Advoc2b, Advoc3b, Advoc4b, Advoc5b, Advoc6b, Advoc7b, Advoc8b, Advoc9b, Aware1b, Aware2b, Aware3b, Aware4b, Aware5b, Aware6b, Aware7b, Inst1b, Inst2b, Inst3b, Inst4b)
#adding a variable to indicate these are from Group A
ARBI_B$Group <- "GroupB"
#renaming so that when I bind the A and B dfs they have the same variable names
ARBI_B1 <- dplyr::rename(ARBI_B,  Advoc1 = 'Advoc1b', Advoc2 = 'Advoc2b', Advoc3 = 'Advoc3b', Advoc4 = 'Advoc4b', Advoc5 = 'Advoc5b', Advoc6 = 'Advoc6b', Advoc7 = 'Advoc7b', Advoc8 = 'Advoc8b', Advoc9 = 'Advoc9b', Aware1 = 'Aware1b', Aware2 = 'Aware2b', Aware3 = 'Aware3b', Aware4 = 'Aware4b', Aware5 = 'Aware5b', Aware6 = 'Aware6b', Aware7 = 'Aware7b', Inst1 = 'Inst1b', Inst2 = 'Inst2b', Inst3 = 'Inst3b', Inst4 = 'Inst4b')
#Binding the A and B sets of data
#use this df for the invariance homework
ARBI_long <- rbind(ARBI_A ARBI_B)
#Binding the A and B sets of data
#use this df for the invariance homework
ARBI_long <- rbind(ARBI_A, ARBI_B)
ARBI_B <- dplyr::select(ARBI_AB, Advoc1b, Advoc2b, Advoc3b, Advoc4b, Advoc5b, Advoc6b, Advoc7b, Advoc8b, Advoc9b, Aware1b, Aware2b, Aware3b, Aware4b, Aware5b, Aware6b, Aware7b, Inst1b, Inst2b, Inst3b, Inst4b)
#adding a variable to indicate these are from Group A
ARBI_B$Group <- "GroupB"
#renaming so that when I bind the A and B dfs they have the same variable names
ARBI_B <- dplyr::rename(ARBI_B,  Advoc1 = 'Advoc1b', Advoc2 = 'Advoc2b', Advoc3 = 'Advoc3b', Advoc4 = 'Advoc4b', Advoc5 = 'Advoc5b', Advoc6 = 'Advoc6b', Advoc7 = 'Advoc7b', Advoc8 = 'Advoc8b', Advoc9 = 'Advoc9b', Aware1 = 'Aware1b', Aware2 = 'Aware2b', Aware3 = 'Aware3b', Aware4 = 'Aware4b', Aware5 = 'Aware5b', Aware6 = 'Aware6b', Aware7 = 'Aware7b', Inst1 = 'Inst1b', Inst2 = 'Inst2b', Inst3 = 'Inst3b', Inst4 = 'Inst4b')
#Binding the A and B sets of data
#use this df for the invariance homework
ARBI_long <- rbind(ARBI_A, ARBI_B)
View(ARBI_long)
ARBI_generating_modelAB <- '
#measurement model
AdvocacyA  =~ .450*Advoc1a + .671*Advoc2a + .715*Advoc3a + .650*Advoc4a + .548*Advoc5a + .634*Advoc6a + .593*Advoc7a + .532*Advoc8a + .592*Advoc9a
AwarenessA =~ .239*Aware1a + .836*Aware2a + .754*Aware3a + .877*Aware4a + .791*Aware5a + .727*Aware6a + .782*Aware7a
InstitutionalA =~ .698*Inst1a + .397*Inst2a + .680*Inst3a + .589*Inst4a + .798*Inst5a2293*Advoc7b + 532*Advoc8b + .564*Advoc9b
AdvocacyB =~ .378*Advoc1b + .666*Advoc2b + .683*Advoc3b + .555*Advoc4b + .672*Advoc5b + .822*Advoc6b + .511*Advoc7b + .488*Advoc8b + .513*Advoc9b
AwarenessB =~ .253*Aware1b + .800*Aware2b + .721*Aware3b + .842*Aware4b + .701*Aware5b + .797*Aware6b + .742*Aware7b
InstitutionalB =~ .623*Inst1b + .301*Inst2b + .666*Inst3b + .533*Inst4b + .721*Inst5b
#Means
AdvocacyA ~5.33*1
AwarenessA ~ 4.26*1
InstitutionalA ~ 1.66*1
AdvocacyB ~5.25*1
AwarenessB ~ 4.30*1
InstitutionalB ~ 1.71*1
#Correlations
AdvocacyA ~~ .80*AwarenessA
AdvocacyA ~~ .80*InstitutionalA
AdvocacyA ~~ .63*AdvocacyB
AdvocacyA ~~ .57*AwarenessB
AdvocacyA ~~ .56*InstitutionalB
AwarenessA ~~ .77*InstitutionalA
AwarenessA ~~ .59*AdvocacyB
AwarenessA ~~ .70*AwarenessB
AwarenessA ~~ .58*InstitutionalB
InstitutionalA ~~ .54*AdvocacyB
InstitutionalA ~~ .79*AwarenessB
InstitutionalA ~~ .66*InstitutionalB
AdvocacyB ~~ .81*AwarenessB
AdvocacyB ~~ .82*InstitutionalB
AwarenessB ~~ .81*InstitutionalB
'
set.seed(240326)
ARBI_AB <- lavaan::simulateData(model = ARBI_generating_modelAB,
model.type = "sem",
meanstructure = T,
sample.nobs=300,
standardized=FALSE)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(ARBI_AB))
#The code below loops through each column of the dataframe and assigns the scaling accordingly
#All rows are the iBel scales, administrations A and B
for(i in 1:ncol(ARBI_AB)){
if(i >= 1 & i <= 42){
ARBI_AB[,i] <- scales::rescale(ARBI_AB[,i], c(1, 5))
}
}
#rounding to integers so that the data resembles that which was collected
library(tidyverse)
ARBI_AB <- ARBI_AB %>% round(0)
#quick check of my work
#psych::describe(iBelAB)
#First creating a tiny df with just the GroupA observations
#Add an ID variable to each row
ARBI_A <- dplyr::select(ARBI_AB, Advoc1a, Advoc2a, Advoc3a, Advoc4a, Advoc5a, Advoc6a, Advoc7a, Advoc8a, Advoc9a, Aware1a, Aware2a, Aware3a, Aware4a, Aware5a, Aware6a, Aware7a, Inst1a, Inst2a, Inst3a, Inst4a)
#adding a variable to indicate these are from Group A
ARBI_A$Group <- "GroupA"
#renaming so that when I bind the A and B dfs they have the same variable names
ARBI_A <- dplyr::rename(ARBI_A,  Advoc1 = 'Advoc1a', Advoc2 = 'Advoc2a', Advoc3 = 'Advoc3a', Advoc4 = 'Advoc4a', Advoc5 = 'Advoc5a', Advoc6 = 'Advoc6a', Advoc7 = 'Advoc7a', Advoc8 = 'Advoc8a', Advoc9 = 'Advoc9a', Aware1 = 'Aware1a', Aware2 = 'Aware2a', Aware3 = 'Aware3a', Aware4 = 'Aware4a', Aware5 = 'Aware5a', Aware6 = 'Aware6a', Aware7 = 'Aware7a', Inst1 = 'Inst1a', Inst2 = 'Inst2a', Inst3 = 'Inst3a', Inst4 = 'Inst4a')
#Second creating a tiny df with just the GroupB observations
#Add an ID variable to each row
ARBI_B <- dplyr::select(ARBI_AB, Advoc1b, Advoc2b, Advoc3b, Advoc4b, Advoc5b, Advoc6b, Advoc7b, Advoc8b, Advoc9b, Aware1b, Aware2b, Aware3b, Aware4b, Aware5b, Aware6b, Aware7b, Inst1b, Inst2b, Inst3b, Inst4b)
#adding a variable to indicate these are from Group A
ARBI_B$Group <- "GroupB"
#renaming so that when I bind the A and B dfs they have the same variable names
ARBI_B <- dplyr::rename(ARBI_B,  Advoc1 = 'Advoc1b', Advoc2 = 'Advoc2b', Advoc3 = 'Advoc3b', Advoc4 = 'Advoc4b', Advoc5 = 'Advoc5b', Advoc6 = 'Advoc6b', Advoc7 = 'Advoc7b', Advoc8 = 'Advoc8b', Advoc9 = 'Advoc9b', Aware1 = 'Aware1b', Aware2 = 'Aware2b', Aware3 = 'Aware3b', Aware4 = 'Aware4b', Aware5 = 'Aware5b', Aware6 = 'Aware6b', Aware7 = 'Aware7b', Inst1 = 'Inst1b', Inst2 = 'Inst2b', Inst3 = 'Inst3b', Inst4 = 'Inst4b')
#Binding the A and B sets of data
#use this df for the invariance homework
ARBI_long <- rbind(ARBI_A, ARBI_B)
str(ARBI_long)
#Binding the A and B sets of data
#use this df for the invariance homework
items <- rbind(ARBI_A, ARBI_B)
items$Group <- as.factor(items$Group)
corrF  <- 'Advocacy =~ Advoc1 + Advoc2 + Advoc3 + Advoc4 + Advoc5
Awareness =~ Aware1 + Aware2 + Aware3 + Aware4 + Aware5 + Aware6 + Aware7
Institutional =~ Inst1 + Inst2 + Inst3 + Inst4
Advocacy~~Awareness
Advocacy~~Institutional
Awareness~~Institutional
'
set.seed(240505)
corrF_fit <- lavaan::cfa(corrF, data = items)
lavaan::summary(corrF_fit, fit.measures=TRUE, standardized=TRUE, rsquare = TRUE)
corrF_FitStats <- tidySEM::table_fit(corrF_fit)
corrF_paramEsts <- tidySEM::table_results(corrF_fit, digits=3, columns = NULL)
corrF_Corrs <- tidySEM::table_cors(corrF_fit, digits=3)
#to see each of the tables, remove the hashtag
#corrF_FitStats
#bifacF_paramEsts
#bifacFCorrs
semPlot::semPaths(corrF_fit, layout = "tree", style = "lisrel", what = "col", whatLabels = "stand")
configural <- lavaan::cfa(corrF, data = items, group = "Group")
lavaan::summary(configural, fit.measures = TRUE, standardized = TRUE)
semPlot::semPaths(configural, layout = "tree", style = "lisrel", what = "col", whatLabels = "est")
#If the procedure stalls open the Consult and follow the instructions to Hit Return to see the plot
weak <- lavaan::cfa(corrF, data = items, group = "Group", group.equal = "loadings")
lavaan::summary(weak, fit.measures = TRUE, standardized = TRUE)
lavaan::anova(configural, weak)
semPlot::semPaths(weak, layout = "tree", style = "lisrel", what = "col", whatLabels = "est")
#Remember to open the consult and hit ENTER twice to view the plots
strong <- lavaan::cfa(corrF, data = items, group = "Group", group.equal=c("loadings", "intercepts"))
lavaan::summary(strong, fit.measures = TRUE, standardized = TRUE)
lavaan::anova(configural, weak, strong)
semPlot::semPaths(strong, layout = "tree", style = "lisrel", what = "col", whatLabels = "est")
#Depress ENTER a couple of times if R appears to freeze this will display both plots
strict <- lavaan::cfa(corrF, data = items, group = "Dept", group.equal = c("loadings", "intercepts", "residuals"))
strict <- lavaan::cfa(corrF, data = items, group = "Group", group.equal = c("loadings", "intercepts", "residuals"))
lavaan::summary(strict, fit.measures = TRUE, standardized = TRUE,)
lavaan::anova(configural, weak, strong, strict)
semPlot::semPaths(strict, layout = "tree", style = "lisrel", what = "col", whatLabels = "est")
#If R appears to stall depress the ENTER key twice to see both plots
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(iBel, "iBel.rds")
#bring back the simulated dat from an .rds file
#iBel <- readRDS("iBel.rds")
#write the simulated data  as a .csv
#write.table(iBel, file="iBel.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#iBel <- read.csv("iBel.csv", header = TRUE)
#First creating a tiny df with just the GroupA observations
#Add an ID variable to each row
iBelA <- dplyr::select(iBelAB, Auth1a, Auth2a, Auth3a, Auth4a, Auth5a, Conn1a, Conn2a, Conn3a, Conn4a, Conn5a, Home1a, Home2a, Home3a, Home4a, Home5a, Thriv1a, Thriv2a, Thriv3a, Thriv4a, Thriv5a)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(iBel, "iBel.rds")
#bring back the simulated dat from an .rds file
#iBel <- readRDS("iBel.rds")
#write the simulated data  as a .csv
#write.table(iBel, file="iBel.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#iBel <- read.csv("iBel.csv", header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(iBel, "iBel.rds")
#bring back the simulated dat from an .rds file
#iBel <- readRDS("iBel.rds")
#write the simulated data  as a .csv
#write.table(iBel, file="iBel.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#iBel <- read.csv("iBel.csv", header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(iBel, "iBel.rds")
#bring back the simulated dat from an .rds file
#iBel <- readRDS("iBel.rds")
#write the simulated data  as a .csv
#write.table(iBel, file="iBel.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#iBel <- read.csv("iBel.csv", header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
options(scipen=999)#eliminates scientific notation
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
#saveRDS(iBel, "iBel.rds")
#bring back the simulated dat from an .rds file
#iBel <- readRDS("iBel.rds")
#write the simulated data  as a .csv
#write.table(iBel, file="iBel.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
#iBel <- read.csv("iBel.csv", header = TRUE)
#First creating a tiny df with just the GroupA observations
#Add an ID variable to each row
iBelA <- dplyr::select(iBelAB, Auth1a, Auth2a, Auth3a, Auth4a, Auth5a, Conn1a, Conn2a, Conn3a, Conn4a, Conn5a, Home1a, Home2a, Home3a, Home4a, Home5a, Thriv1a, Thriv2a, Thriv3a, Thriv4a, Thriv5a)
iBelong_generating_modelAB <- '
#measurement model
AuthenticityA  =~ .66*Auth1a + .64*Auth2a + .63*Auth3a + .58*Auth4a + .55*Auth5a
ConnectionA =~ .72*Conn1a + .60*Conn2a + .59*Conn3a + .58*Conn4a + .58*Conn5a
HomeA =~ .64*Home1a + .63*Home2a + .57*Home3a + .57*Home4a + .53*Home5a
RECthrivingA =~ .68*Thriv1a + .66*Thriv2a + .59*Thriv3a + .54*Thriv4a + .49*Thriv5a
SelfDefinitionA =~ .82*Self1a + .65*Self2a + .65*Self3a + .54*Self4a + .49*Self5a
AuthenticityB  =~ .63*Auth1b + .68*Auth2b + .69*Auth3b + .52*Auth4b + .54*Auth5b
ConnectionB =~ .70*Conn1b + .63*Conn2b + .55*Conn3b + .54*Conn4b + .54*Conn5b
HomeB =~ .60*Home1b + .64*Home2b + .51*Home3b + .52*Home4b + .59*Home5b
RECthrivingB =~ .66*Thriv1b + .64*Thriv2b + .52*Thriv3b + .59*Thriv4b + .53*Thriv5b
SelfDefinitionB =~ .75*Self1b + .69*Self2b + .68*Self3b + .57*Self4b + .53*Self5b
#Means
AuthenticityA ~ 4.30*1
ConnectionA ~ 4.16*1
HomeA ~ 4.51*1
RECthrivingA ~ 4.81*1
SelfDefinitionA ~ 4.53*1
AuthenticityB ~ 4.28*1
ConnectionB ~ 4.20*1
HomeB ~ 4.44*1
RECthrivingB ~ 4.9*1
SelfDefinitionB ~ 4.49*1
#Correlations
AuthenticityA ~~ .81*AuthenticityB
ConnectionA ~~ .85*ConnectionB
HomeA ~~ .77*HomeB
RECthrivingA ~~ .85*RECthrivingB
SelfDefinitionA ~~ .84*SelfDefinitionB
'
set.seed(240326)
iBelAB <- lavaan::simulateData(model = iBelong_generating_modelAB,
model.type = "sem",
meanstructure = T,
sample.nobs=500,
standardized=FALSE)
#used to retrieve column indices used in the rescaling script below
col_index <- as.data.frame(colnames(iBelAB))
#The code below loops through each column of the dataframe and assigns the scaling accordingly
#All rows are the iBel scales, administrations A and B
for(i in 1:ncol(iBelAB)){
if(i >= 1 & i <= 50){
iBelAB[,i] <- scales::rescale(iBelAB[,i], c(1, 6))
}
}
#rounding to integers so that the data resembles that which was collected
library(tidyverse)
iBelAB <- iBelAB %>% round(0)
#quick check of my work
psych::describe(iBelAB)
#First creating a tiny df with just the GroupA observations
#Add an ID variable to each row
iBelA <- dplyr::select(iBelAB, Auth1a, Auth2a, Auth3a, Auth4a, Auth5a, Conn1a, Conn2a, Conn3a, Conn4a, Conn5a, Home1a, Home2a, Home3a, Home4a, Home5a, Thriv1a, Thriv2a, Thriv3a, Thriv4a, Thriv5a)
#adding a variable to indicate these are from Group A
iBelA$Group <- "GroupA"
#renaming so that when I bind the A and B dfs they have the same variable names
iBelA <- dplyr::rename(iBelA, Auth1 = "Auth1a", Auth2 = "Auth2a",  Auth3 = "Auth3a", Auth4 = "Auth4a", Auth5 = "Auth5a", Conn1 = "Conn1a", Conn2 = "Conn2a", Conn3 = "Conn3a", Conn4 = "Conn4a", Conn5 = "Conn5a", Home1 = "Home1a",  Home2 = "Home2a", Home3 = "Home3a", Home4 = "Home4a", Home5 = "Home5a", Thriv1 = "Thriv1a", Thriv2 = "Thriv2a", Thriv3 = "Thriv3a", Thriv4 = "Thriv4a", Thriv5 = "Thriv5a")
#Second creating a tiny df with just the GroupB observations
iBelB <- dplyr::select(iBelAB, Auth1b, Auth2b, Auth3b, Auth4b, Auth5b, Conn1b, Conn2b, Conn3b, Conn4b, Conn5b, Home1b, Home2b, Home3b, Home4b, Home5b, Thriv1b, Thriv2b, Thriv3b, Thriv4b, Thriv5b)
#adding a variable to indicate these are from Group B
iBelB$Group <- "GroupB"
#renaming so that when I bind the A and B dfs they have the same variable names
iBelB <- dplyr::rename(iBelB, Auth1 = "Auth1b", Auth2 = "Auth2b",  Auth3 = "Auth3b", Auth4 = "Auth4b", Auth5 = "Auth5b", Conn1 = "Conn1b", Conn2 = "Conn2b", Conn3 = "Conn3b", Conn4 = "Conn4b", Conn5 = "Conn5b", Home1 = "Home1b",  Home2 = "Home2b", Home3 = "Home3b", Home4 = "Home4b", Home5 = "Home5b", Thriv1 = "Thriv1b", Thriv2 = "Thriv2b", Thriv3 = "Thriv3b", Thriv4 = "Thriv4b", Thriv5 = "Thriv5b")
#Binding the A and B sets of data
#use this df for the invariance homework
iBelLONG <- rbind(iBelA, iBelB)
